#Использовать cmdline
#Использовать logos
#Использовать v8runner
#Использовать ReadParams
#Использовать "."


Перем _ПараметрыРаботы;
Перем _Лог;
Перем _Замер;
Перем _Конфигуратор;

// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.app.ConnectStore";
КонецФункции

Процедура ПереподключитьХранилище()
	
	_Лог.Информация(НЕ _ПараметрыРаботы.Параметры["Repo.Blind"] = Истина);
	Если НЕ _ПараметрыРаботы.Параметры["Repo.Blind"] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	логРаннер = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	логРаннер.УстановитьУровень(_Лог.Уровень());

	Для Каждого Подключение Из _ПараметрыРаботы.Параметры["bases"] Цикл
		представлениеБазы = Подключение["Base.Connect"];
		
		Конфигуратор = Новый УправлениеКонфигуратором;
		
		замерПотомок = _Замер.ПолучитьПотомка();
		логРаннер.УстановитьРаскладку(замерПотомок);
		
		Конфигуратор.УстановитьКонтекст(Подключение["Base.Connect"], Подключение["Base.User"], Подключение["Base.Password"]);
		Конфигуратор.ПутьКПлатформе1С(_ПараметрыРаботы.Параметры["EXE1CV8"]);
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(_ПараметрыРаботы.Параметры["Cluster.lockuccode"]);
		
		_Замер.НачатьЗамер("Начало отключения от хранилища " + представлениеБазы, "ОтключениеОтХранилища");
		Попытка
			Конфигуратор.ОтключитьсяОтХранилища();
		Исключение
			_Лог.Информация(ОписаниеОшибки());
		КонецПопытки;
		Текст = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер("Отключено от хранилища " + представлениеБазы);
		
		_Замер.НачатьЗамер("Подключение к хранилищу " +
			Подключение["Repo.Connect"] +
			" " + представлениеБазы, "ПодключениеКХранилищу");
		
		Конфигуратор.ПодключитьсяКХранилищу(Подключение["Repo.Connect"], Подключение["Repo.User"], Подключение["Repo.Password"], Истина);
		Текст = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер("Подключено к хранилищу " + Подключение["Repo.Connect"] + " " + представлениеБазы, "ПодключениеКХранилищу");
		
		// ОбновитьБазыуДанных(представлениеБазы, Конфигуратор, Подключение);
		
		ОбщегоНазначения.УдалитьФайлЕслиСуществует(Конфигуратор.ФайлИнформации());
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьБазыуДанных(представлениеБазы, Конфигуратор, Подключение)
	
	Если _ПараметрыРаботы.Параметры["UpdateCfg"] Тогда
		
		_Замер.НачатьЗамер("Начало обновления конфигурации " + представлениеБазы, "ОбновлениеКонфигурации");
		
		Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(Подключение["Repo.Connect"], Подключение["Repo.User"], Подключение["Repo.Password"]);
		Текст = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер("Конфигурация обновлена " + представлениеБазы);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПереподключитьРасширение()
	Если НЕ _ПараметрыРаботы.Параметры["Repo.Blind"] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	логРаннер = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	логРаннер.УстановитьУровень(_Лог.Уровень());
	Для Каждого Подключение Из _ПараметрыРаботы.Параметры["bases"] Цикл
		представлениеБазы = Подключение["Base.Connect"];
		Сообщить("" + Подключение + "!!!!!!!!!!!!!!");
		
		Конфигуратор = Новый УправлениеКонфигуратором;
		
		замерПотомок = _Замер.ПолучитьПотомка();
		логРаннер.УстановитьРаскладку(замерПотомок);
		
		Конфигуратор.УстановитьКонтекст(Подключение["Base.Connect"], Подключение["Base.User"], Подключение["Base.Password"]);
		Конфигуратор.ПутьКПлатформе1С(_ПараметрыРаботы.Параметры["EXE1CV8"]);
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(_ПараметрыРаботы.Параметры["Cluster.lockuccode"]);
		
		Конфигуратор.ПодключитьсяКХранилищу(Подключение["RepoExt.Connect"], Подключение["RepoExt.User"], Подключение["RepoExt.Password"], Истина, Истина, Подключение["RepoExt.RepoExt"]);
		Текст = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.НачатьЗамер("Подключение к хранилищу " +
			Подключение["RepoExt.Connect"] +
			" " + представлениеБазы, "ПодключениеКХранилищу");
		Если _ПараметрыРаботы.Параметры["UpdateCfg"] Тогда
			
			_Замер.НачатьЗамер("Начало обновления конфигурации " + представлениеБазы, "ОбновлениеКонфигурации");
			
			Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(Подключение["Repo.Connect"], Подключение["Repo.User"], Подключение["Repo.Password"]);
			Текст = Конфигуратор.ВыводКоманды();
			Если НЕ ПустаяСтрока(Текст) Тогда
				_Лог.Информация(Текст);
			КонецЕсли;
			
			_Замер.СообщитьЗамер("Конфигурация обновлена " + представлениеБазы);
			
		КонецЕсли;
		
		
		_Замер.СообщитьЗамер("Подключено к хранилищу " + Подключение["RepoExt.Connect"] + " " + представлениеБазы, "ПодключениеКХранилищу");
		
		ОбновитьБазыуДанных(представлениеБазы, Конфигуратор, Подключение);
		
		ОбщегоНазначения.УдалитьФайлЕслиСуществует(Конфигуратор.ФайлИнформации());
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьБазуДанных()
	
	_ПараметрыРаботы.ТестПараметров();

	Если _ПараметрыРаботы.РежимТестированияПараметров Тогда
		_Замер.СообщитьЗавершение();
		Возврат;
	КонецЕсли;
	
	ПереподключитьХранилище();
	
	ПереподключитьРасширение();
	
	_Замер.СообщитьЗавершение();
	
КонецПроцедуры

_Лог = Логирование.ПолучитьЛог(ИмяЛога());

_ПараметрыРаботы = Новый ПараметрыРаботы();

_ПараметрыРаботы.Инициализация(АргументыКоманднойСтроки, _Лог);
_Замер = _ПараметрыРаботы.Замер;
_Конфигуратор = _ПараметрыРаботы.Конфигуратор;

СкопироватьБазуДанных();